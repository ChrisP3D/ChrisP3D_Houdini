<?xml version="1.0" encoding="UTF-8"?>
<pythonPanelDocument>
  <!-- This file contains definitions of Python interfaces and the
 interfaces menu.  It should not be hand-edited when it is being
 used by the application.  Note, that two definitions of the
 same interface or of the interfaces menu are not allowed
 in a single file. -->
  <interface name="attribEditor" label="Attribute Editor" icon="MISC_python" showNetworkNavigationBar="false" help_url="">
    <script><![CDATA[########################################################################
# Replace the sample code below with your own to create a
# PyQt5 or PySide2 interface.  Your code must define an
# onCreateInterface() function that returns the root widget of
# your interface.
#
# The 'hutil.Qt' is for internal-use only.
# It is a wrapper module that enables the sample code below to work with
# either a Qt4 or Qt5 environment for backwards-compatibility.
#
# When developing your own Python Panel, import directly from PySide2
# or PyQt5 instead of from 'hutil.Qt'.
########################################################################

#
# SAMPLE CODE
#
# from PySide2 import QtCore
# from PySide2 import QtWidgets

# class FontDemo(QtWidgets.QWidget):
#     def __init__(self, parent=None):
#         QtWidgets.QWidget.__init__(self, parent)

#         hbox = QtWidgets.QHBoxLayout()

#         self.setGeometry(500, 300, 250, 110)
#         self.setWindowTitle('Font Demo')

#         button = QtWidgets.QPushButton('Change Font', self)
#         button.setFocusPolicy(QtCore.Qt.NoFocus)
#         button.move(20, 20)

#         hbox.addWidget(button)

#         self.connect(button, QtCore.SIGNAL('clicked()'), self.showDialog)

#         self.label = QtWidgets.QLabel('This is some sample text', self)
#         self.label.move(130, 20)

#         hbox.addWidget(self.label, 1)
#         self.setLayout(hbox)

#     def showDialog(self):
#         ok, font = QtWidgets.QFontDialog.getFont()
#         if ok:
#             self.label.setFont(font)

# dialog = FontDemo()
# dialog.show()

from PySide2 import QtCore
from PySide2 import QtWidgets

def onCreateInterface():
    widget = QtWidgets.QLabel('Hello World!')
    return widget

def get_selected_node():
    # Get the selected nodes
    selected_nodes = hou.selectedNodes()
    # Return the last selected node or None
    return selected_nodes[-1] if selected_nodes else None

class AttributeEditor(QtWidgets.QWidget):
    def __init__(self, parent = None):
        QtWidgets.QWidget.__init__(self, parent)

        self.layout = QtWidgets.QVBoxLayout(self)
        
        # Create List View
        self.listView = QtWidgets.QListView()
        self.model = QtCore.QStringListModel()
        self.listView.setModel(self.model)
        self.listView.setEditTriggers(QtWidgets.QAbstractItemView.AllEditTriggers)

        # Create Input Field
        self.inputField = QtWidgets.QLineEdit()
        self.inputField.setPlaceholderText("Enter attribute name")

        # Add widgets to layout
        self.layout.addWidget(self.listView)
        self.layout.addWidget(self.inputField)

        # Connect input field
        self.inputField.returnPressed.connect(self.on_inputField_returnPressed)

    def on_inputField_returnPressed(self):
        attr_name = self.inputField.text()
        self.populate_list(attr_name)

    def populate_list(self, attr_name):
        node = get_selected_node()
        if node:
            geo = node.geometry()
            # Choose attribute type based on some logic or UI option
            attrs = geo.pointAttribs()  # Example for point attributes
            values = [str(geo.attribValue(attr_name, pt)) for pt in geo.points()]
            self.model.setStringList(values)
    def update_attribute(self, attr_name, values):
        node = get_selected_node()
        if node:
            geo = node.geometry()
            with geo.beginModifiable() as mod_geo:
                for pt, value in zip(mod_geo.points(), values):
                    pt.setAttribValue(attr_name, value)
            node.setDisplayFlag(True)

# To display the panel
# app = QtWidgets.QApplication([])
editor = AttributeEditor()
editor.show()


]]></script>
    <includeInPaneTabMenu menu_position="0" create_separator="false"/>
    <includeInToolbarMenu menu_position="419" create_separator="false"/>
    <help><![CDATA[]]></help>
  </interface>
</pythonPanelDocument>
